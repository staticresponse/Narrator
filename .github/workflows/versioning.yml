name: Versioning

on:
  push:
    branches:
      - dev

jobs:
  update_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Ensures we can detect changes

      - name: Set up Git Authentication
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git config --global credential.helper store
          echo "https://${{ secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials
          chmod 600 ~/.git-credentials

      - name: Determine Changed Files
        id: changed-files
        run: |
          echo "Checking for file changes..."
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD || echo "first_commit")
          echo "Changed files: $CHANGED_FILES"
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Update Version
        run: |
          set -e  # Exit on error
          
          VERSION_FILE="version.json"
          BRANCH_NAME="dev"

          echo "Processing version updates..."
          echo "Branch: $BRANCH_NAME"

          increment_version() {
            FILE=$1
            JSON_KEY=$2

            if echo "$CHANGED_FILES" | grep -q "$FILE"; then
              echo "Detected change in $FILE"

              CURRENT_VERSION=$(jq -r ".\"$JSON_KEY\"" $VERSION_FILE)

              if [[ ! $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "Error: Invalid version format for $JSON_KEY: '$CURRENT_VERSION'"
                exit 1
              fi

              echo "Current $JSON_KEY version: $CURRENT_VERSION"

              IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

              if [[ "$BRANCH_NAME" == *"feature"* ]]; then
                ((MAJOR++)); MINOR=0; PATCH=0
                echo "Feature branch detected - Incrementing MAJOR version"
              elif [[ "$BRANCH_NAME" == *"enhancement"* ]]; then
                ((MINOR++)); PATCH=0
                echo "Enhancement branch detected - Incrementing MINOR version"
              else
                ((PATCH++))
                echo "Default behavior - Incrementing PATCH version"
              fi

              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              echo "Updated $JSON_KEY version: $NEW_VERSION"

              jq ".\"$JSON_KEY\" = \"$NEW_VERSION\"" $VERSION_FILE > tmp.json && mv tmp.json $VERSION_FILE
            else
              echo "No changes detected in $FILE, skipping version update for $JSON_KEY."
            fi
          }

          # Always increment PATCH if pushed directly to dev
          if [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "Direct push to dev - Forcing PATCH increment for all tracked files."
            for KEY in "App_version" "Preprocessor" "TTS Engine"; do
              CURRENT_VERSION=$(jq -r ".\"$KEY\"" $VERSION_FILE)
              IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
              ((PATCH++))
              NEW_VERSION="$MAJOR.$MINOR.$PATCH"
              jq ".\"$KEY\" = \"$NEW_VERSION\"" $VERSION_FILE > tmp.json && mv tmp.json $VERSION_FILE
            done
          else
            increment_version "app.py" "App_version"
            increment_version "preprocessor.py" "Preprocessor"
            increment_version "tts.py" "TTS Engine"
          fi

      - name: Commit and Push Changes
        run: |
          git add version.json
          git commit -m "Auto-incremented version [skip ci]" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
